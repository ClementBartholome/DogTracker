@inherits LayoutComponentBase
@rendermode InteractiveAuto


@* <div class="sidebar"> *@
@*     <NavMenu/> *@
@* </div> *@

<main>
    @* Required *@
    <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
    <MudPopoverProvider/>

    @* Needed for dialogs *@
    <MudDialogProvider
        CloseButton="true"
        NoHeader="true"
        Position="DialogPosition.Center"
        CloseOnEscapeKey="true"
        FullWidth="false"
    />

    @* Needed for snackbars *@
    <MudSnackbarProvider/>

    <MudLayout>
        <MudAppBar Class="p-2" Elevation="2" Color="Color.Surface">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                           OnClick="@DrawerToggle"/>
            <MudImage Src="../../images/MonToutou_Icon.png" Width="90" Height="85" Class="rounded-lg"></MudImage>
            <MudSpacer />
            <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4 ml-auto" T="bool" ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.NightsStay : Icons.Material.Filled.WbSunny)"/>
            <MudSpacer/>
        </MudAppBar>

        <MudDrawerContainer>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2" class="vh-100">
                <MudDrawerHeader>
                    <MudImage Src="../../images/MonToutou_Icon.png" Width="90" Height="90" Class="rounded-lg"></MudImage>
                </MudDrawerHeader>
                <NavMenu/>
            </MudDrawer>
        </MudDrawerContainer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 32px !important;">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    </main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen;

    void DrawerToggle()
    {
        Console.WriteLine("Drawer toggled");
        _drawerOpen = !_drawerOpen;
    }
    
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }


}