@using DogTracker.ViewModels
@using DogTracker.Services
@inherits LayoutComponentBase
@rendermode InteractiveAuto
@inject NotificationService NotificationService;


@* <div class="sidebar"> *@
@*     <NavMenu/> *@
@* </div> *@

<main>
    @* Required *@
    <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
    <MudPopoverProvider/>

    @* Needed for dialogs *@
    <MudDialogProvider
        CloseButton="true"
        NoHeader="true"
        Position="DialogPosition.Center"
        CloseOnEscapeKey="true"
        FullWidth="false"
    />

    @* Needed for snackbars *@
    <MudSnackbarProvider/>

    <MudLayout>
        <MudAppBar Class="p-2" Elevation="2" Color="Color.Surface">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                           OnClick="@DrawerToggle"/>
            <a href="/">
                <MudImage Src="../../images/MonToutou_Icon.png" Width="90" Height="85" Class="rounded-lg"></MudImage>
            </a>
            <MudSpacer/>
            <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4 ml-auto" T="bool"
                       ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.NightsStay : Icons.Material.Filled.WbSunny)"/>
            <MudSpacer/>
            <MudBadge Overlap="true" Content="@_notificationCount" Color="@(_notificationCount > 0 ? Color.Error : Color.Info)">
                <MudToggleIconButton @bind-Toggled="_notificationsOpen"
                                     Icon="@Icons.Material.Filled.NotificationsNone"
                                     Color="Color.Default"
                                     ToggledIcon="@Icons.Material.Filled.Notifications"
                                     ToggledColor="Color.Default"
                                     />
            </MudBadge>
            <MudPopover Open="_notificationsOpen" Fixed="true" Class="mt-16" Style="z-index: 1000; max-width: 300px"
                        AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin">
                <div class="d-flex justify-content-between">
                    <MudText Class="pl-3 pt-3 underline" Typo="Typo.h6">Mes notifications</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.NavigateNext"></MudIconButton>
                </div>
                <MudList T="object" Dense="true" Class="pa-2 mt-2" Style="max-width: 360px" Gutters="true" Padding="true">
                    @if (_notifications.Any())
                    {
                        @foreach (var notification in _notifications.Where(n => !n.IsDone))
                        {
                            <MudListItem Class="rounded-lg bg-light bg-opacity-10">
                                <div class="d-flex align-center">
                                    <div class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@notification.Title</MudText>
                                        <div class="d-flex align-center">
                                            <MudText Class="pa-2">@notification.Content</MudText>
                                            <MudIconButton Icon="@Icons.Material.Filled.Check"
                                                           Color="Color.Success"
                                                           Size="Size.Small"
                                                           OnClick="@(() => MarkAsDone(notification.Id))"/>
                                        </div>
                                    </div>
                                </div>
                            </MudListItem>
                            @if (notification != _notifications.Last())
                            {
                                <MudDivider/>
                            }
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Class="pa-2">Aucune notification</MudText>
                    }
                </MudList>
            </MudPopover>
        </MudAppBar>
        <MudDrawerContainer>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2" class="vh-100">
                <MudDrawerHeader>
                    <MudImage Src="../../images/MonToutou_Icon.png" Width="90" Height="90"
                              Class="rounded-lg"></MudImage>
                </MudDrawerHeader>
                <NavMenu/>
            </MudDrawer>
        </MudDrawerContainer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large"
                          Style="margin-top: 32px !important; padding-bottom: 32px !important;">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    <RadialMenu/>
</main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    private List<NotificationViewModel> _notifications = [];
    private int _notificationCount;
    private bool _notificationsOpen;
    private Origin TransformOrigin { get; set; } = Origin.TopRight;
    private Origin AnchorOrigin { get; set; } = Origin.TopRight;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await CheckNotifications();
            StateHasChanged();
        }
    }

    private async Task CheckNotifications()
    {
        _notifications = await NotificationService.GetNotifications();
        _notificationCount = _notifications.Count;
    }
    
    private async Task MarkAsDone(int notificationId)
    {
        await NotificationService.MarkNotificationAsDone(notificationId);
        await CheckNotifications();
        StateHasChanged();
    }

}